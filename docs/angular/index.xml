<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on Field Manual</title>
    <link>https://work.rehanvipin.me/docs/angular/</link>
    <description>Recent content in Angular on Field Manual</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://work.rehanvipin.me/docs/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/docs/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/overview/</guid>
      <description>An overview (and miscellaneous stuff) #  Angular is a platform, apparently, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.
Typescript #  Angular uses TS. It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/docs/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/components/</guid>
      <description>Components #  Creating them #  A bare component is a class, defined in a .ts file. You can create new one like this:
 Create a .ts file and export a class that is decorated by Component from @angular/core. The decorator takes in an object as argument. The object has properties like selector (the HTML selector) and template (or templateUrl). Import this class in app.module.ts and add it to declarations in the NgModule decorator of AppModule.</description>
    </item>
    
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/docs/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/template/</guid>
      <description>The template syntax #  The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.
Binding in HTML JS in HTML? There are multiple ways you can use JS objects in HTML. Two of them are:
Interpolation In places within the HTML where you can put custom values (within tags, properties of attributes, etc) you can use the result of a JS expression like this: &amp;lt;div&amp;gt;{{ some JS expression }}&amp;lt;/div&amp;gt;.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/docs/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/services/</guid>
      <description>Services #  They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: Services and DI.
Creating them #  You usually create one in a .service.ts file. It is an exported class with functions which perform the required business actions. It can then be injected into the required classes.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/docs/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/routing/</guid>
      <description>Routing &amp;amp; Co. #  Some modern apps, like the one built with Angular are Single Page Apps. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!
Creating routes #  Routes are defined as an array of objects.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/docs/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/forms/</guid>
      <description>Forms and validation #  There are two kinds of forms in Angular:
 Template based (the content and the logic is in the HTML) Model based A.K.A. Reactive (the content and logic is in the component)  Creating a form #   You need the FormModule from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms. In the component with the form, on the form element, set a template reference variable like so: &amp;lt;form #someNiceNameForForm=&amp;quot;ngForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
