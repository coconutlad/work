<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Field Manual</title>
    <link>https://work.rehanvipin.me/</link>
    <description>Recent content in Introduction on Field Manual</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://work.rehanvipin.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/front-end-stuff/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/front-end-stuff/d3/</guid>
      <description>Data Driven Docs? # It&amp;rsquo;s a powerful library with a bit of a learning curve.
There a heck lot of things it can do. Nice confusion. These might be some good resources:
An updated D3 tutorial (This was the best!) Official tutorial (It can take some time to get used to observableHQ&amp;rsquo;s notebooks) Huge collection of tutorials https://wattenberger.com/blog/d3#intro [SUGGESTION]: Do the d3indepth tutorial first and practise a bit by trying to make your own visualizations.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/overview/</guid>
      <description>An overview (and miscellaneous stuff) # Angular is a platform, apparently, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.
Typescript # Angular uses TS. It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same.</description>
    </item>
    
    <item>
      <title>Spring Boot</title>
      <link>https://work.rehanvipin.me/java/spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/java/spring-boot/</guid>
      <description> Spring # Spring is a collection of projects like Spring Boot, Spring Framework, Spring Data, Spring Security etc. Spring Framework is the most popular Java framework. What exactly does it do? Let&amp;rsquo;s find out.
Resources?
An overview from official docs - https://docs.spring.io/spring-boot/docs/current/reference/html/using.html Spring Framework tutorial - https://www.baeldung.com/spring-tutorial Dependency Injection in Spring - https://www.baeldung.com/spring-dependency-injection Spring Boot tutorial - https://www.baeldung.com/spring-boot Spring Boot reference documentation - https://docs.spring.io/spring-boot/docs/current/reference/html/features.html </description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/components/</guid>
      <description>The real CONTENT # Fun fact: The @Component decorator actually extends @Directive decorator because components are technically directives.
Creating them # A bare component is a class, defined in a .ts file. You can create new one like this:
Create a .ts file and export a class that is decorated by Component from @angular/core. The decorator takes in an object as argument. The object has properties like selector (which is a CSS selector to find out which HTML elements this component should apply to) and template (or templateUrl).</description>
    </item>
    
    <item>
      <title>Typescript</title>
      <link>https://work.rehanvipin.me/front-end-stuff/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/front-end-stuff/typescript/</guid>
      <description>Write JavaScript with confidence # TODO: The docs are good. Check them out: https://www.typescriptlang.org/docs/.
Some notes # declare a in TS is used to tell the compiler that the variable a is declared somewhere else and it&amp;rsquo;s usage in this file should not throw an error. (e.g. it&amp;rsquo;s declared in another file and both of them are used via script tags in HTML)
Any definitions in a class declaration are moved to the constructor when the code is transpiled to JS.</description>
    </item>
    
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/template/</guid>
      <description>The template syntax # The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.
There are HTML attributes and there are DOM properties. Sometimes there&amp;rsquo;s a one-one mapping between them, sometimes an attribute exists but has no corresponding property and vice-versa.
Binding in HTML JS in HTML? # There are multiple ways you can use JS objects in HTML.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/services/</guid>
      <description>Services (do STUFF) # They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: Services and DI.
According to that page linked above:
A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console</description>
    </item>
    
    <item>
      <title>Directives</title>
      <link>https://work.rehanvipin.me/angular/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/directives/</guid>
      <description>Directives: Hmmm &amp;hellip; # These are just classes that add extra behavior to elements ~ Angular docs.
Components are represented in HTML as elements. Directives are represented as attributes on those elements. A directive can also be applied on a simple HTML element, not just components.
Creating them # You can create a directive class in a file like nice.directive.ts like so:
import { Directive, OnInit } from &amp;#39;@angular/core&amp;#39; Directive({ selector: &amp;#39;&amp;#39; // CSS style selector e.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/routing/</guid>
      <description>Routing &amp;amp; Co. # Some modern apps, like the one built with Angular are Single Page Apps. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!
Creating routes # Routes are defined as an array of objects.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/forms/</guid>
      <description>Forms and validation # There are two kinds of forms in Angular:
Template based (the content and the logic is in the HTML) Model based A.K.A. Reactive (the content and logic is in the component) Creating a form # You need the FormModule from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms. When you import that module, it adds an NgForm directive to all form tags.</description>
    </item>
    
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/pipes/</guid>
      <description>Transforming data # Built-in pipes # You can transform data before it is rendered in a template. There are many inbuilt pipes. The format is {{ yourContent | pipeName:pipeArg1 }} where the arguments are JS objects / literals and are optional. Example: &amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;.
Custom pipe # An example pipe:
// in the file goodie.pipe.ts import {Pipe, PipeTransform} from &amp;#39;@angular/core&amp;#39; @Pipe({ name: &amp;#39;goodiepipe&amp;#39; // the name used to call the pipe in the template }) export class GoodiePipe implements PipeTransform { // this is the function that is called with the args transform(input: string, arg1: number) { if(arg1 &amp;lt; 5) return input+&amp;#34; is low&amp;#34;; return input+&amp;#34; is high&amp;#34;; } } You must then add it to the declarations of the NgModule where you want to use it.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/di/</guid>
      <description>Adding features! ðŸ™Œ # TODO: add stuff from this: https://angular.io/guide/hierarchical-dependency-injection and try to move most of the service related stuff to the services page.
Dependency injection # This is how you provide new components with extra resources they need to function. To indicate that a class (any class, not just a component / service) has a dependency or is a dependency you decorate it with @Injectable(). From the docs</description>
    </item>
    
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/rxjs/</guid>
      <description>Async &amp;amp; network stuff # Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent one event that happens in the future while observables represent zero or more events that could happen synchronously or in the future.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/test/</guid>
      <description>Unit &amp;amp; Integrated tests # Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:
Isolated # Only tests the JS class not the component Mostly used for services and pipes Need to create instances of classes on your own Integrated # Tests the class and template together Mostly used for components and directives The objects are created by the framework Unit tests # They test a single unit (like a class, function, or a bunch of classes) in isolation.</description>
    </item>
    
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/angular/libraries/</guid>
      <description>Ultra level reusability # They provide extra functionality to Angular. They don&amp;rsquo;t run on their own. They need to be used in an application. There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.
Angular libraries (e.g. the @angular/x ones) are NgModules.
Some functionality of an app can be packaged into a library so it can be reused with other apps. They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.</description>
    </item>
    
    <item>
      <title>/tmp</title>
      <link>https://work.rehanvipin.me/stolenstuff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/stolenstuff/</guid>
      <description>Temporary code access # Random stuff that doesn&amp;rsquo;t fit anywhere else.</description>
    </item>
    
    <item>
      <title>/next</title>
      <link>https://work.rehanvipin.me/whatnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/whatnext/</guid>
      <description>So much to learn # These sound useful:
Search for &amp;ldquo;TODO&amp;rdquo; in notes and do those parts Get an overview of what design is about from this talk. Learn how to use penpot with their YT tutorials. This walkthrough can give a good idea. Note down points from Brad&amp;rsquo;s Walkthroughs and also Kevin&amp;rsquo;s. Writing documentation. It&amp;rsquo;s useful because that&amp;rsquo;s what people see first and that&amp;rsquo;s how they can contribute and use what you&amp;rsquo;re building.</description>
    </item>
    
    <item>
      <title>theme-guide</title>
      <link>https://work.rehanvipin.me/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/shortcodes/</guid>
      <description>Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne.</description>
    </item>
    
    <item>
      <title>/credits</title>
      <link>https://work.rehanvipin.me/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/credits/</guid>
      <description> Credits # Built with HUGO Uses the hugo-book theme Compass icon by Icons8 You can find the source for this site on GitHub.
A small guide to shortcodes within this theme:
Theme Guide </description>
    </item>
    
  </channel>
</rss>
