<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Field Manual</title>
    <link>https://work.rehanvipin.me/</link>
    <description>Recent content in Introduction on Field Manual</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 Jan 2022 20:07:08 +0530</lastBuildDate><atom:link href="https://work.rehanvipin.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/docs/front-end-stuff/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/front-end-stuff/d3/</guid>
      <description>Data Driven Docs? #  While it&amp;rsquo;s a good library overall, I&amp;rsquo;m learning how to make network graphs with it. Here goes nothing ðŸ˜›
Oooh, this is one crazy library with a heck lot of things it can do. Nice confusion. These might be some good resources:
  Official tutorial  Huge collection of tutorials I like Pluralsight. Videos can be helpful y&amp;rsquo;know. This course seems updated  An updated D3 tutorial (taken from the GitHub list) should also help!</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/docs/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/overview/</guid>
      <description>An overview (and miscellaneous stuff) #  Angular is a platform, apparently, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.
Typescript #  Angular uses TS. It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/docs/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/components/</guid>
      <description>The real CONTENT #  Creating them #  A bare component is a class, defined in a .ts file. You can create new one like this:
 Create a .ts file and export a class that is decorated by Component from @angular/core. The decorator takes in an object as argument. The object has properties like selector (which is a CSS selector to find out which HTML elements this component should apply to) and template (or templateUrl).</description>
    </item>
    
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/docs/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/template/</guid>
      <description>The template syntax #  The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.
Binding in HTML JS in HTML? #  There are multiple ways you can use JS objects in HTML. Two of them are:
Interpolation #  In places within the HTML where you can put custom values (within tags, properties of attributes, etc) you can use the result of a JS expression like this: &amp;lt;div&amp;gt;{{ some JS expression }}&amp;lt;/div&amp;gt;.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/docs/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/services/</guid>
      <description>Services (do STUFF) #  They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: Services and DI.
Creating them #  You usually create one in a .service.ts file. It is an exported class with functions which perform the required business actions. It can then be injected into the required classes.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/docs/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/routing/</guid>
      <description>Routing &amp;amp; Co. #  Some modern apps, like the one built with Angular are Single Page Apps. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!
Creating routes #  Routes are defined as an array of objects.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/docs/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/forms/</guid>
      <description>Forms and validation #  There are two kinds of forms in Angular:
 Template based (the content and the logic is in the HTML) Model based A.K.A. Reactive (the content and logic is in the component)  Creating a form #   You need the FormModule from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms. When you import that module, it adds an NgForm directive to all form tags.</description>
    </item>
    
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/docs/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/pipes/</guid>
      <description>Transforming data #  Built-in pipes #  You can transform data before it is rendered in a template. There are many inbuilt pipes. The format is {{ yourContent | pipeName:pipeArg1 }} where the arguments are JS objects / literals and are optional. Example: &amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;.
Custom pipe #  An example pipe:
// in the file goodie.pipe.ts import {Pipe, PipeTransform} from &amp;#39;@angular/core&amp;#39;  @Pipe({  name: &amp;#39;goodiepipe&amp;#39; // the name used to call the pipe in the template }) export class GoodiePipe implements PipeTransform {  // this is the function that is called with the args  transform(input: string, arg1: number) {  if(arg1 &amp;lt; 5)  return input+&amp;#34; is low&amp;#34;;  return input+&amp;#34; is high&amp;#34;;  } } You must then add it to the declarations of the NgModule where you want to use it.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/docs/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/di/</guid>
      <description>Adding features! ðŸ™Œ #  Dependency injection #  This is how you provide new components with extra resources they need to function. To indicate that a class (any class, not just a component / service) has a dependency or is a dependency you decorate it with @Injectable(). From the docs
 The injector is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed.</description>
    </item>
    
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/docs/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/rxjs/</guid>
      <description>Async &amp;amp; network stuff #  Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent one event that happens in the future while observables represent zero or more events that could happen synchronously or in the future.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/docs/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/test/</guid>
      <description>Unit &amp;amp; Integrated tests #  Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:
Isolated #   Only tests the JS class not the component Mostly used for services and pipes Need to create instances of classes on your own   Integrated #   Tests the class and template together Mostly used for components and directives The objects are created by the framework    Unit tests #  They test a single unit (like a class, function, or a bunch of classes) in isolation.</description>
    </item>
    
    <item>
      <title>Whatnext</title>
      <link>https://work.rehanvipin.me/docs/whatnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/whatnext/</guid>
      <description>So much to learn ðŸ˜® #  I think I should learn these things because they might be useful at work:
 Common design patterns (with examples?) Should add a lifecycle section to Angular? Maybe just link to the docs? Add more content about Angular services (really needed?) TypeScript, since it&amp;rsquo;s the default lang for Angular. Just an overview from a YT video perhaps? Search for &amp;ldquo;TODO&amp;rdquo; in the Angular notes and do those parts For the Angular docs do it in this order: &amp;ldquo;Getting Started&amp;rdquo; -&amp;gt; &amp;ldquo;Tutorials&amp;rdquo; -&amp;gt; &amp;ldquo;Understanding Angular&amp;rdquo; -&amp;gt; &amp;ldquo;Reference/Conceptual Reference&amp;rdquo; ngModel is one fancy thing.</description>
    </item>
    
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/docs/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/angular/libraries/</guid>
      <description>Ultra level reusability #  They provide extra functionality to Angular. They don&amp;rsquo;t run on their own. They need to be used in an application. There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.
Some functionality of an app can be packaged into a library so it can be reused with other apps. They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.
Installing them #  Install via npm like so: npm i jquery.</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://work.rehanvipin.me/docs/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/docs/shortcodes/</guid>
      <description>Buttons #  Buttons are styled links that can lead to local page or external link.
Example #  {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  Columns #  Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne...  &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt;  # Mid Content Lorem markdownum insigne.</description>
    </item>
    
    <item>
      <title>RTFM</title>
      <link>https://work.rehanvipin.me/posts/rtfm/</link>
      <pubDate>Mon, 24 Jan 2022 20:07:08 +0530</pubDate>
      
      <guid>https://work.rehanvipin.me/posts/rtfm/</guid>
      <description>&lt;h2 id=&#34;what-is-this-why-is-this&#34;&gt;
  What is this? Why is this?
  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-this-why-is-this&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As much as I like Stackoverflow and Google and the work they&amp;rsquo;ve done, it&amp;rsquo;s still hard to find exactly the right information exactly when you want it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>https://work.rehanvipin.me/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://work.rehanvipin.me/credits/</guid>
      <description>Credits #   Built with HUGO Uses the hugo-book theme  Compass icon by Icons8  You can find the source for this site on GitHub.</description>
    </item>
    
  </channel>
</rss>
