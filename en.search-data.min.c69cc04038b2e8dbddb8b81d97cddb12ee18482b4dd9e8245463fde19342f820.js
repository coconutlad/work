'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/angular/',title:"Angular",section:"Docs",content:"Angular, the fancy web framework #  I gotta use this for work lol. I heard that people hate it. Screw them. If it works, it works.\nBase #  Where am I starting from? Why is that important? It defines what kind of content will be in this manual. I know nothing about Angular. I know a bare minimum of HTML, CSS, and JS. ðŸ˜° let\u0026rsquo;s see how this goes. YOLO ðŸ™‚.\nCourse stuff #  I\u0026rsquo;m following along The Angular Fundamentals course on Pluralsight. The authors have nice practice exercises available on their website.\n"}),a.add({id:1,href:'/posts/rtfm/',title:"RTFM",section:"Blog",content:"What is this? Why is this? #  As much as I like Stackoverflow and Google and the work they\u0026rsquo;ve done, it\u0026rsquo;s still hard to find exactly the right information exactly when you want it.\nI think that is because we are all at different stages in software development and have varied knowledge about things. You might know more about CSS Grids than someone else and they might know more about JavaScript requests. You probably even understand things differently and have different mental models. That\u0026rsquo;s why I\u0026rsquo;m writing this. (Also because writing things down helps you remember stuff.)\nThese are notes, basically #  Yeah, that\u0026rsquo;s about it. Notes by me, taken from random sources, for me. You are free to use them and even suggest edits (through GitHub) if you like.\nOh also, this theme is crazy good and has a lot of features. It\u0026rsquo;s gonna take me a while to make use of all of them and reach a good level of productivity.\nHave fun! ðŸ™‚\n"}),a.add({id:2,href:'/docs/shortcodes/buttons/',title:"Buttons",section:"Shortcodes",content:"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "}),a.add({id:3,href:'/docs/shortcodes/columns/',title:"Columns",section:"Shortcodes",content:"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "}),a.add({id:4,href:'/docs/shortcodes/details/',title:"Details",section:"Shortcodes",content:"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content Lorem markdownum insigne\u0026hellip;   "}),a.add({id:5,href:'/docs/shortcodes/hints/',title:"Hints",section:"Shortcodes",content:"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "}),a.add({id:6,href:'/docs/shortcodes/section/',title:"Section",section:"Shortcodes",content:"Section #  Section renders pages in section as definition list, using title and description.\nExample #  {{\u0026lt; section \u0026gt;}}   Page1   Page 1 #   Page2   Page 2 #   "}),a.add({id:7,href:'/docs/shortcodes/section/page1/',title:"Page1",section:"Section",content:"Page 1 #  "}),a.add({id:8,href:'/docs/shortcodes/section/page2/',title:"Page2",section:"Section",content:"Page 2 #  "}),a.add({id:9,href:'/docs/shortcodes/tabs/',title:"Tabs",section:"Shortcodes",content:"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "}),a.add({id:10,href:'/credits/',title:"Credits",section:"Introduction",content:"Credits #   Built with HUGO Uses the hugo-book theme  Compass icon by Icons8  You can find the source for this site on GitHub.\n"}),a.add({id:11,href:'/docs/angular/overview/',title:"Overview",section:"Angular",content:"An overview (and miscellaneous stuff) #  Angular is a platform, apparently, that includes a framework, some libraries, and developer tools to work with all of that.\nTypescript #  Angular uses TS. It\u0026rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same. You can try it out online. Its main features are:\nStatic typing #  You can declare types while declaring variables, like so: let var: number;.\nInterfaces #  They let you define a structure that objects must follow. An interface is a type. When you assign an object to a variable of that type, the object must have the properties in that interface (each of the same type). Like so\ninterface nice { name: string, age: number } let sic: nice; sic = { name: \u0026#34;hai\u0026#34;, // adding, removing, or changing the types of these properties causes an error  age: 10 }; Class properties #  ES6 classes mainly define their properties via their constructors. TS lets you to define these properties in the class itself. You can optionally specify types for them. This is only for readability. E.g.\nclass Hip { num: number wutdis constructor() { this.num = 10; this.wutdis = \u0026#34;hmm\u0026#34;; } } Public / Private access #  All class properties in ES6 are public. You can make them private in TS by adding the private before them during declaration. It also provides this nifty shorthand for the constructor:\nclass Hip { constructor(public wutdis: string, private num) { // it implicitly does this.wutdis = wutdis  } } let f = new Hip(\u0026#34;sic\u0026#34;, 10); console.log(f); // { wutdis: \u0026#34;sic\u0026#34;, num: 10 } "})})()